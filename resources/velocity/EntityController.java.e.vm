
package $package ;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
#foreach( $import in $controllerImports )
import ${import};
#end

@RestController
@RequestMapping("${controllerPrefixWithSlashs}${table.javaNameFirstCharSmall}s")
public class ${table.javaName}Controller {




        @Autowired
        private ${table.javaName}Service ${table.javaNameFirstCharSmall}Service;


        $preAuthorize
        @PostMapping("/")
        public ${table.javaName} create${table.javaName}(@RequestBody ${table.javaName} ${table.javaNameFirstCharSmall})  {

            return ${table.javaNameFirstCharSmall}Service.save(${table.javaNameFirstCharSmall});

        }


        $preAuthorize
        @PutMapping("/" )
        public ${table.javaName} update${table.javaName}(@RequestBody ${table.javaName} ${table.javaNameFirstCharSmall}) {
            if (!${table.javaNameFirstCharSmall}Service.isIdSet(${table.javaNameFirstCharSmall})) {
            throw new RuntimeException("Can't update the ${table.javaNameFirstCharSmall} without its ID.");
            }
            return ${table.javaNameFirstCharSmall}Service.save(${table.javaNameFirstCharSmall});
        }


        $preAuthorize
        @PatchMapping("/")
        public void patchUpdate${table.javaName}(@RequestBody Map<String, Object> ${table.javaNameFirstCharSmall}ParametersMap)
        {
              ${table.javaNameFirstCharSmall}Service.updateWithPatch(${table.javaNameFirstCharSmall}ParametersMap);
        }



        $preAuthorize
        @GetMapping("/")
        public List<${table.javaName}> findAll${table.javaName}s()     {
            return ${table.javaNameFirstCharSmall}Service.findAll();
        }


         $preAuthorize
         @GetMapping("/{id}")
         public Optional<${table.javaName}>  find${table.javaName}ById(@PathVariable $PK_Type id) {
              return  ${table.javaNameFirstCharSmall}Service.findById(id);
            }


        $preAuthorize
        @DeleteMapping("/{id}")
        public void delete${table.javaName}(@PathVariable $PK_Type id)
        {
            ${table.javaNameFirstCharSmall}Service.deleteById(id);
        }




}




